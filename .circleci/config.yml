version: 2 # use CircleCI 2.0

jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
      - image: circleci/mysql:8.0.4
        environment:
          MYSQL_ROOT_PASSWORD: rootpw
          MYSQL_DATABASE: test_db
          MYSQL_USER: user
          MYSQL_PASSWORD: passw0rd
        steps:
          - checkout
          - run:
              # Our primary container isn't MYSQL so run a sleep command until it's ready.
              name: Waiting for MySQL to be ready
              command: |
                for i in `seq 1 10`;
                do
                  nc -z 127.0.0.1 3306 && echo Success && exit 0
                  echo -n .
                  sleep 1
                done
                echo Failed waiting for MySQL && exit 1
          - run:
              name: Install MySQL CLI; Import dummy data; run an example query
              command: |
                sudo apt-get install mysql-client
                mysql -h 127.0.0.1 -u user -ppassw0rd test_db < sql-data/dummy.sql
                mysql -h 127.0.0.1 -u user -ppassw0rd --execute="SELECT * FROM test_db.Persons"
      - image: circleci/php:7.1-node-browsers # ...with this image as the primary container; this is where all `steps` will run
          working_directory: ~/yii-enhanced-gii # directory where steps will run
          steps: # a set of executable commands
            - checkout # special step to check out source code to working directory
            - run: sudo apt install -y libsqlite3-dev zlib1g-dev
            - run: sudo docker-php-ext-install zip
            - run: sudo composer self-update
            - restore_cache: # special step to restore the dependency cache if `composer.lock` does not change
                keys:
                  - composer-v1-{{ checksum "composer.lock" }}
                  # fallback to using the latest cache if no exact match is found (See https://circleci.com/docs/2.0/caching/)
                  - composer-v1-
            - run: composer install -n --prefer-dist
            - save_cache: # special step to save the dependency cache with the `composer.lock` cache key template
                key: composer-v1-{{ checksum "composer.lock" }}
                paths:
                  - vendor
            - run: touch storage/testing.sqlite
            #- run: php artisan migrate --env=testing --database=sqlite_testing --force
            - run: ./vendor/bin/phpunit
            #- run: ./vendor/bin/codecept build
            #- run: ./vendor/bin/codecept run
            # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
